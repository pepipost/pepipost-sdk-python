# -*- coding: utf-8 -*-

"""
    pepipost

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""


class UpdateSubaccount(object):

    """Implementation of the 'Update subaccount' model.

    UpdateSubaccount modal

    Attributes:
        username (string): The username for the subaccount
        new_email (string): The new email address to be registered with the
            subaccount
        new_password (string): The new password of the subaccount
        confirm_password (string): reconfirm the new password for the
            subaccount
        credit_type (string): Allowed values one_time_credit or unlimited by
            default, all subaccounts are created with credit type as
            unlimited.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "username":'username',
        "new_email":'new_email',
        "new_password":'new_password',
        "confirm_password":'confirm_password',
        "credit_type":'credit_type'
    }

    def __init__(self,
                 username=None,
                 new_email=None,
                 new_password=None,
                 confirm_password=None,
                 credit_type=None):
        """Constructor for the UpdateSubaccount class"""

        # Initialize members of the class
        self.username = username
        self.new_email = new_email
        self.new_password = new_password
        self.confirm_password = confirm_password
        self.credit_type = credit_type


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        username = dictionary.get('username')
        new_email = dictionary.get('new_email')
        new_password = dictionary.get('new_password')
        confirm_password = dictionary.get('confirm_password')
        credit_type = dictionary.get('credit_type')

        # Return an object of this model
        return cls(username,
                   new_email,
                   new_password,
                   confirm_password,
                   credit_type)


