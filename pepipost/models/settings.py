# -*- coding: utf-8 -*-

"""
    pepipost

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""


class Settings(object):

    """Implementation of the 'Settings' model.

    TODO: type model description here.

    Attributes:
        footer (bool): enable or disable footer
        click_track (bool): enable or disable click tracking
        open_track (bool): enable or disable open tracking
        unsubscribe_track (bool): enable or disable unsubscribe tracking
        hepf (bool): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "footer":'footer',
        "click_track":'click_track',
        "open_track":'open_track',
        "unsubscribe_track":'unsubscribe_track',
        "hepf":'hepf'
    }

    def __init__(self,
                 footer=None,
                 click_track=None,
                 open_track=None,
                 unsubscribe_track=None,
                 hepf=None):
        """Constructor for the Settings class"""

        # Initialize members of the class
        self.footer = footer
        self.click_track = click_track
        self.open_track = open_track
        self.unsubscribe_track = unsubscribe_track
        self.hepf = hepf


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        footer = dictionary.get('footer')
        click_track = dictionary.get('click_track')
        open_track = dictionary.get('open_track')
        unsubscribe_track = dictionary.get('unsubscribe_track')
        hepf = dictionary.get('hepf')

        # Return an object of this model
        return cls(footer,
                   click_track,
                   open_track,
                   unsubscribe_track,
                   hepf)


